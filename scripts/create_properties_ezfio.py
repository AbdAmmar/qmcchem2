#!/usr/bin/env python3
#
# Creates the properties.config file in the EZFIO directory. This is
# done by reading all the properties written in the src/PROPERTIES
# directory.
#

import os, sys
root = os.environ['QMCCHEM_PATH']

os.chdir(root+'/src/')
sys.path.insert(0,'./')

from properties import properties

# Write file if file has changed
# ==============================

def write_if_modified(filename,tmp_filename):
  try:
    file = open(filename,'r')
  except IOError:
    f1 = ""
  else:
    f1 = file.read()
    file.close()

  file = open(tmp_filename,'r')
  f2 = file.read()
  file.close()

  if f1 != f2:
    os.rename(tmp_filename,filename)
  else:
    os.remove(tmp_filename)


# Create the EZFIO file for properties
# ====================================

filename     = root+'/ezfio_config/properties.config'
tmp_filename = filename + '.new'


# Write temporary file
# --------------------

out = [ "properties" ]
for p in properties:
  out += [ '  %30s   logical'%(p[1].ljust(30)) ]

with open(tmp_filename,'w') as f:
  f.write("\n".join(out))

write_if_modified(filename,tmp_filename)

# Create the ${QMCCHEM_PATH}/ocaml/Property.ml file
# =================================================


properties_qmcvar = properties + [ (x[0], x[1]+"_qmcvar", x[2]) for x in  properties]

# type
# ----

out = ["""
(* File generated by ${QMCCHEM_PATH}/scripts/create_properties.py. Do not
   modify here
 *)

type t =
| Cpu
| Wall
| Accep""" ]

for p in properties_qmcvar:
  out += [ "| %s"%(p[1].capitalize()) ]

# calc function
# -------------

out += [ """;;

let calc = function
| Cpu
| Wall
| Accep -> true"""]
for p in properties:
  if p[1] == "e_loc":
    tf = "true"
  else:
    tf = "false"
  out += [ """| %(P)s
| %(P)s_qmcvar ->
    begin
      if (Ezfio.has_properties_%(p)s ()) then
        Ezfio.get_properties_%(p)s ()
      else
        %(true_false)s
    end
"""%{'P':p[1].capitalize(), 'p':p[1], 'true_false': tf} ]

# set_calc
# --------

out += [""";;

let u _ = ();;

let set_calc = function
| Cpu
| Wall
| Accep -> u""" ]

for p in properties:
  out += [ """| %(P)s
| %(P)s_qmcvar ->
      Ezfio.set_properties_%(p)s
"""%{'P':p[1].capitalize(), 'p':p[1]} ]

# of_string
# ---------

out += [""";;

let of_string s =
  match (String.lowercase_ascii s) with
  | "cpu" -> Cpu
  | "wall" -> Wall
  | "accep" -> Accep""" ]

for p in properties_qmcvar:
  out += ["""  | "%(p)s" -> %(P)s"""%{'P':p[1].capitalize(), 'p':p[1]} ]
out += ["""  | p -> failwith ("unknown property "^p) ;;
""" ]

# to_string
# ---------

out += [ """
let to_string = function
| Cpu -> "Cpu"
| Wall -> "Wall"
| Accep -> "Accep" """ ]
for p in properties_qmcvar:
  out += ["""| %(P)s -> "%(P)s" """%{'P':p[1].capitalize(), 'p':p[1]} ]
out += [ """;;

let of_bytes x =
   Bytes.to_string x
   |> of_string

let to_bytes x =
   to_string x
   |> Bytes.of_string
""" ]

# is_scalar
# ---------

out += [ """
let is_scalar = function
| Cpu -> true
| Wall -> true
| Accep -> true """ ]
for p in properties:
  if p[2] == "":
    out += ["""| %(P)s | %(P)s_qmcvar -> true """%{'P':p[1].capitalize()} ]
  else:
    out += ["""| %(P)s | %(P)s_qmcvar -> false """%{'P':p[1].capitalize()} ]
out += [""";;
"""]

# all properties
# --------------

out += ["""
let all = [ Cpu ; Wall ; Accep ; """]
for p in properties:
  out += [" %s ;"%(p[1].capitalize()),  ]
out += ["];;" ]

filename     = root+'/ocaml/Property.ml'
tmp_filename = filename + '.new'
with open(tmp_filename,'w') as f:
  f.write("\n".join(out))
write_if_modified(filename,tmp_filename)

